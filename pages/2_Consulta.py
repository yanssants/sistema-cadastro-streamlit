# page_2.py
# (C√≥digo atualizado para exibir o campo "vinculo_descricao")

import streamlit as st
from supabase_client import supabase # Importa o cliente Supabase centralizado

def app():
    st.title("üìã Consulta de Registros")

    # Campo de busca por nome
    nome_busca = st.text_input("üîç Buscar por nome", placeholder="Digite o nome completo ou parte dele")
    
    # Lista de munic√≠pios (igual √† utilizada na page 1)
    municipios_para = [
        "Abaetetuba", "Abel Figueiredo", "Acar√°", "Afu√°", "√Ågua Azul do Norte", "Alenquer", 
        "Almeirim", "Altamira", "Anaj√°s", "Ananindeua", "Anapu", "Augusto Corr√™a", 
        "Aurora do Par√°", "Aveiro", "Bagre", "Bai√£o", "Bannach", "Barcarena", "Bel√©m", 
        "Belterra", "Benevides", "Bom Jesus do Tocantins", "Bonito", "Bragan√ßa", "Brasil Novo",
        "Brejo Grande do Araguaia", "Breu Branco", "Breves", "Bujaru", "Cachoeira do Arari", 
        "Cachoeira do Piri√°", "Camet√°", "Cana√£ dos Caraj√°s", "Capanema", "Capit√£o Po√ßo", 
        "Castanhal", "Chaves", "Colares", "Concei√ß√£o do Araguaia", "Conc√≥rdia do Par√°", 
        "Cumaru do Norte", "Curion√≥polis", "Curralinho", "Curu√°", "Curu√ß√°", "Dom Eliseu", 
        "Eldorado dos Caraj√°s", "Faro", "Floresta do Araguaia", "Garraf√£o do Norte", 
        "Goian√©sia do Par√°", "Gurup√°", "Igarap√©-A√ßu", "Igarap√©-Miri", "Inhangapi", "Ipixuna do Par√°", 
        "Irituia", "Itaituba", "Itupiranga", "Jacareacanga", "Jacund√°", "Juruti", "Limoeiro do Ajuru",
        "M√£e do Rio", "Magalh√£es Barata", "Marab√°", "Maracan√£", "Marapanim", "Marituba", "Medicil√¢ndia", 
        "Melga√ßo", "Mocajuba", "Moju", "Monte Alegre", "Muan√°", "Nova Esperan√ßa do Piri√°", 
        "Nova Ipixuna", "Nova Timboteua", "Novo Progresso", "Novo Repartimento", "√ìbidos", 
        "Oeiras do Par√°", "Oriximin√°", "Our√©m", "Ouril√¢ndia do Norte", "Pacaj√°", "Palestina do Par√°", 
        "Paragominas", "Parauapebas", "Pau D'Arco", "Peixe-Boi", "Pi√ßarra", "Placas", 
        "Ponta de Pedras", "Portel", "Porto de Moz", "Prainha", "Primavera", "Quatipuru", 
        "Reden√ß√£o", "Rio Maria", "Rondon do Par√°", "Rur√≥polis", "Salin√≥polis", "Salvaterra", 
        "Santa B√°rbara do Par√°", "Santa Cruz do Arari", "Santa Isabel do Par√°", "Santa Luzia do Par√°", 
        "Santa Maria das Barreiras", "Santa Maria do Par√°", "Santana do Araguaia", "Santar√©m", 
        "Santar√©m Novo", "Santo Ant√¥nio do Tau√°", "S√£o Caetano de Odivelas", "S√£o Domingos do Araguaia",
        "S√£o Domingos do Capim", "S√£o F√©lix do Xingu", "S√£o Francisco do Par√°", "S√£o Geraldo do Araguaia", 
        "S√£o Jo√£o da Ponta", "S√£o Jo√£o de Pirabas", "S√£o Jo√£o do Araguaia", "S√£o Miguel do Guam√°", 
        "S√£o Sebasti√£o da Boa Vista", "Sapucaia", "Senador Jos√© Porf√≠rio", "Soure", "Tail√¢ndia", 
        "Terra Alta", "Terra Santa", "Tom√©-A√ßu", "Tracuateua", "Trair√£o", "Tucum√£", "Tucuru√≠", 
        "Ulian√≥polis", "Uruar√°", "Vigia", "Viseu", "Vit√≥ria do Xingu", "Xinguara"
    ]
    
    # Filtros avan√ßados
    with st.expander("Filtros Avan√ßados", expanded=False):
        municipio_filtro = st.selectbox("Filtrar por Munic√≠pio", ["Todos"] + municipios_para)
        # 1. ALTERADO: "Sem v√≠nculo" para "Com v√≠nculo"
        tipo_pessoa_filtro = st.selectbox("Filtrar por Tipo de Pessoa", ["Todos", "Com v√≠nculo", "Candidato", "Lideran√ßa"])
        tipo_ajuda_filtro = st.selectbox("Filtrar por Tipo de Ajuda (Principal)", ["Todos", "Dinheiro", "Cesta B√°sica", "CredCidad√£o", "Atendimento M√©dica", "Exames", "Emprego", "Interna√ß√£o Hospitalar", "Transporte/Passagem", "Outros"])

    st.markdown("---")

    # Bot√£o para realizar a busca com a nova l√≥gica do Supabase
    if st.button("Buscar", type="primary"):
        try:
            # Constr√≥i a query no Supabase de forma encadeada
            # 'select("*, ajuda_extra(*)")' faz o "JOIN" automaticamente
            query = supabase.table('ajuda').select('*, ajuda_extra(*)').order('nome', desc=False)

            # Aplica os filtros se eles foram selecionados
            if nome_busca.strip():
                query = query.ilike('nome', f'%{nome_busca.strip()}%')
            
            if municipio_filtro != "Todos":
                query = query.eq('municipio', municipio_filtro)
            
            if tipo_pessoa_filtro != "Todos":
                query = query.eq('tipo_pessoa', tipo_pessoa_filtro)
            
            if tipo_ajuda_filtro != "Todos":
                query = query.eq('tipo_ajuda', tipo_ajuda_filtro)
            
            # Executa a query
            response = query.execute()
            resultados = response.data

            if not resultados:
                st.error("Nenhum registro encontrado para os crit√©rios informados. Verifique os filtros e tente novamente.")
            else:
                st.success(f"{len(resultados)} registro(s) encontrado(s).")
                st.markdown("---")

                # Exibe os resultados
                for dados in resultados:
                    with st.container(border=True):
                        st.markdown(f"### {dados.get('nome', 'Nome n√£o informado')}")
                        st.write(f"**Cadastro realizado em:** {dados.get('data_hora', 'N/A')}")
                        
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.write(f"**Tipo de Pessoa:** {dados.get('tipo_pessoa', 'N/A')}")
                            # 2. ADICIONADO: Exibe a descri√ß√£o do v√≠nculo se houver
                            if dados.get('tipo_pessoa') == "Com v√≠nculo":
                                st.write(f"**V√≠nculo:** {dados.get('vinculo_descricao', 'N/A')}")
                            if dados.get('tipo_pessoa') == "Lideran√ßa":
                                st.write(f"**Candidato:** {dados.get('candidato_lideranca', 'N/A')}")
                        with col2:
                            st.write(f"**Munic√≠pio:** {dados.get('municipio', 'N/A')}")
                        with col3:
                            st.write(f"**Telefone:** {dados.get('telefone', 'N/A')}")
                        
                        st.markdown("---")
                        st.markdown("**Assist√™ncia Principal:**", help="Registro inicial feito no formul√°rio.")
                        
                        valor_principal = float(dados.get('valor', 0.0))
                        valor_formatado_principal = f"R$ {valor_principal:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                        
                        st.write(f"- **Tipo:** {dados.get('tipo_ajuda', 'N/A')}")
                        if dados.get('descricao_outros'):
                            st.write(f"- **Descri√ß√£o:** {dados.get('descricao_outros')}")
                        st.write(f"- **Quantidade:** {dados.get('quantidade', 0)}")
                        st.write(f"- **Valor:** {valor_formatado_principal}")
                        
                        if dados.get('detalhes'):
                            st.markdown("**Detalhes Adicionais:**")
                            st.info(f"{dados.get('detalhes')}")
                        
                        ajudas_extras = dados.get('ajuda_extra', [])
                        if ajudas_extras:
                            with st.expander(f"Ajudas Extras ({len(ajudas_extras)})", expanded=False):
                                for ajuda in ajudas_extras:
                                    st.markdown("---")
                                    valor_extra = float(ajuda.get('valor', 0.0))
                                    valor_formatado_extra = f"R$ {valor_extra:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                                    
                                    st.write(f"**Tipo de Ajuda:** {ajuda.get('tipo_ajuda', 'N/A')}")
                                    if ajuda.get('descricao_outros'):
                                        st.write(f"**Descri√ß√£o:** {ajuda.get('descricao_outros')}")
                                    st.write(f"**Quantidade:** {ajuda.get('quantidade', 0)}")
                                    st.write(f"**Valor:** {valor_formatado_extra}")
                                    st.write(f"**Adicionado em:** {ajuda.get('data_hora', 'N/A')}")
                        else:
                            st.info("Nenhuma ajuda extra registrada para esta pessoa.")
                    st.markdown("---")

        except Exception as e:
            st.error("Ocorreu um erro ao buscar os registros no banco de dados.")
            st.error(f"Detalhes do erro: {e}")

app()
